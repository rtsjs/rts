{"version":3,"sources":["components/priorityqueue/priorityqueue.ts"],"names":["PriorityQueue","PriorityQueue.constructor","PriorityQueue.push","PriorityQueue.pop","PriorityQueue.peek","PriorityQueue.size","PriorityQueue.bubbleUp","PriorityQueue.sinkDown"],"mappings":"AAAA;IAIIA,uBAAYA,OAAWA;QAHfC,SAAIA,GAAiBA,EAAEA,CAACA;QAI5BA,IAAIA,CAACA,OAAOA,GAAGA,OAAOA,CAACA;IAC3BA,CAACA;IAEDD,4BAAIA,GAAJA,UAAKA,OAAcA;QACfE,+CAA+CA;QAC/CA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;QACxBA,yBAAyBA;QACzBA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA;IACxCA,CAACA;IAEDF,2BAAGA,GAAHA;QACIG,qDAAqDA;QACrDA,IAAIA,KAAKA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;QACzBA,2CAA2CA;QAC3CA,IAAIA,GAAGA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,EAAEA,CAACA;QAC1BA,6DAA6DA;QAC7DA,+BAA+BA;QAC/BA,EAAEA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,CAACA;YACvBA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,GAAGA,GAAGA,CAACA;YACnBA,IAAIA,CAACA,QAAQA,CAACA,CAACA,CAACA,CAACA;QACrBA,CAACA;QACDA,MAAMA,CAACA,KAAKA,CAACA;IACjBA,CAACA;IAEDH,4BAAIA,GAAJA;QACII,EAAEA,CAACA,CAACA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,CAACA;YACvBA,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;QACxBA,CAACA;QACDA,IAAIA;YAACA,MAAMA,CAACA,IAAIA,CAACA;IACrBA,CAACA;IAEDJ,4BAAIA,GAAJA;QACIK,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA;IAC5BA,CAACA;IAEDL,gCAAQA,GAARA,UAASA,CAAQA;QACbM,0CAA0CA;QAC1CA,IAAIA,OAAOA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAAAA,uCAAuCA;QAClEA,mDAAmDA;QACnDA,OAAOA,CAACA,GAAGA,CAACA,EAAEA,CAACA;YACXA,oDAAoDA;YACpDA,IAAIA,OAAOA,GAAGA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EACrCA,MAAMA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;YAChCA,+DAA+DA;YAC/DA,YAAYA;YACZA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,OAAOA,EAAEA,MAAMA,CAACA,CAACA;gBAC9BA,KAAKA,CAACA;YAEVA,0DAA0DA;YAC1DA,YAAYA;YACZA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,GAAGA,OAAOA,CAACA;YAC7BA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,GAAGA,MAAMA,CAACA;YACtBA,CAACA,GAAGA,OAAOA,CAACA;QAChBA,CAACA;IACLA,CAACA;IAEDN,gCAAQA,GAARA,UAASA,CAAQA;QACbO,4CAA4CA;QAC5CA,IAAIA,MAAMA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,EACzBA,OAAOA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;QAC3BA,0CAA0CA;QAE1CA,OAAOA,IAAIA,EAAEA,CAACA;YACVA,6CAA6CA;YAC7CA,IAAIA,OAAOA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,OAAOA,GAAGA,OAAOA,GAAGA,CAACA,CAACA;YACjDA,yDAAyDA;YACzDA,UAAUA;YACVA,IAAIA,IAAIA,GAAUA,IAAIA,CAACA;YACvBA,qDAAqDA;YACrDA,EAAEA,CAACA,CAACA,OAAOA,GAAGA,MAAMA,CAACA,CAACA,CAACA;gBACnBA,oCAAoCA;gBACpCA,IAAIA,MAAMA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBAChCA,2CAA2CA;gBAC3CA,4DAA4DA;gBAC5DA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,OAAOA,EAAEA,MAAMA,CAACA,CAACA;oBAC9BA,IAAIA,GAAGA,OAAOA,CAACA;YACvBA,CAACA;YACDA,0CAA0CA;YAC1CA,EAAEA,CAACA,CAACA,OAAOA,GAAGA,MAAMA,CAACA,CAACA,CAACA;gBACnBA,IAAIA,MAAMA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBAChCA,2CAA2CA;gBAC3CA,EAAEA,CAACA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,IAAIA,IAAIA,IAAIA,GAAGA,OAAOA,GAAGA,MAAMA,CAACA,EAAEA,MAAMA,CAACA,CAACA;oBACxDA,IAAIA,GAAGA,OAAOA,CAACA;YACvBA,CAACA;YAEDA,wCAAwCA;YACxCA,EAAEA,CAACA,CAACA,IAAIA,IAAIA,IAAIA,CAACA;gBAACA,KAAKA,CAACA;YAExBA,gCAAgCA;YAChCA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;YAC/BA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,OAAOA,CAACA;YAC1BA,CAACA,GAAGA,IAAIA,CAACA;QACbA,CAACA;IACLA,CAACA;IACLP,oBAACA;AAADA,CAnGA,AAmGCA,IAAA;AAnGY,qBAAa,gBAmGzB,CAAA","file":"components/priorityqueue/priorityqueue.js","sourcesContent":["export class PriorityQueue {\n    private data:Array<number> = [];\n    private compare:any;\n\n    constructor(compare:any) {\n        this.compare = compare;\n    }\n\n    push(element:number) {\n        // Add the new element to the end of the array.\n        this.data.push(element);\n        // Allow it to bubble up.\n        this.bubbleUp(this.data.length - 1);\n    }\n\n    pop() {\n        // Store the first element so we can return it later.\n        var first = this.data[0];\n        // Get the element at the end of the array.\n        var end = this.data.pop();\n        // If there are any elements left, put the end element at the\n        // start, and let it sink down.\n        if (this.data.length > 0) {\n            this.data[0] = end;\n            this.sinkDown(0);\n        }\n        return first;\n    }\n\n    peek() {\n        if (this.data.length > 0) {\n            return this.data[0];\n        }\n        else return null;\n    }\n\n    size() {\n        return this.data.length;\n    }\n\n    bubbleUp(n:number) {\n        // Fetch the element that has to be moved.\n        var element = this.data[n];// score = this.scoreFunction(element);\n        // When at 0, an element can not go up any further.\n        while (n > 0) {\n            // Compute the parent element's index, and fetch it.\n            var parentN = Math.floor((n + 1) / 2) - 1,\n                parent = this.data[parentN];\n            // If the parent has a lesser score, things are in order and we\n            // are done.\n            if (this.compare(element, parent))\n                break;\n\n            // Otherwise, swap the parent with the current element and\n            // continue.\n            this.data[parentN] = element;\n            this.data[n] = parent;\n            n = parentN;\n        }\n    }\n\n    sinkDown(n:number) {\n        // Look up the target element and its score.\n        var length = this.data.length,\n            element = this.data[n];\n        //elemScore = this.scoreFunction(element);\n\n        while (true) {\n            // Compute the indices of the child elements.\n            var child2N = (n + 1) * 2, child1N = child2N - 1;\n            // This is used to store the new position of the element,\n            // if any.\n            var swap:number = null;\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                var child1 = this.data[child1N];\n                //child1Score = this.scoreFunction(child1);\n                // If the score is less than our element's, we need to swap.\n                if (this.compare(element, child1))\n                    swap = child1N;\n            }\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                var child2 = this.data[child2N];\n                //child2Score = this.scoreFunction(child2);\n                if (this.compare((swap == null ? element : child1), child2))\n                    swap = child2N;\n            }\n\n            // No need to swap further, we are done.\n            if (swap == null) break;\n\n            // Otherwise, swap and continue.\n            this.data[n] = this.data[swap];\n            this.data[swap] = element;\n            n = swap;\n        }\n    }\n}\n"],"sourceRoot":"/source/"}